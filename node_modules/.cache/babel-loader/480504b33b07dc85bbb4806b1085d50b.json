{"ast":null,"code":"import axios from 'axios';\nimport { apiUrl } from \"../../vars/config\";\nexport const addCollegeUser = userData => {\n  return new Promise((resolve, reject) => {\n    axios({\n      method: \"POST\",\n      url: \"\".concat(apiUrl, \"/CollegeUsers/createUser\"),\n      data: {\n        userData\n      }\n    }).then(({\n      data\n    }) => {\n      resolve(data);\n    }).catch(error => {\n      reject(error);\n    });\n  });\n};\nexport const loginUser = (email, password, userType) => {\n  return new Promise((resolve, reject) => {\n    axios({\n      method: \"POST\",\n      url: \"\".concat(apiUrl, \"/CollegeUsers/loginUser\"),\n      data: {\n        email,\n        password,\n        userType\n      }\n    }).then(({\n      data\n    }) => {\n      resolve(data);\n    }).catch(error => {\n      reject(error);\n    });\n  });\n};\nexport const editUser = (userType, userData) => {\n  return new Promise((resolve, reject) => {\n    axios({\n      method: \"POST\",\n      url: \"\".concat(apiUrl, \"/CollegeUsers/editUser\"),\n      data: {\n        userType,\n        userData\n      }\n    }).then(({\n      data\n    }) => {\n      resolve(data);\n    }).catch(error => {\n      reject(error);\n    });\n  });\n};\nexport const getUserByToken = token => {\n  return new Promise((resolve, reject) => {\n    axios({\n      method: \"POST\",\n      url: \"\".concat(apiUrl, \"/CollegeUsers/getUserByToken\"),\n      data: {\n        token\n      }\n    }).then(({\n      data\n    }) => {\n      resolve(data);\n    }).catch(error => {\n      reject(error);\n    });\n  });\n};\nexport const getEmployeesByUserType = (userType, fullName) => {\n  return new Promise((resolve, reject) => {\n    axios({\n      method: \"POST\",\n      url: \"\".concat(apiUrl, \"/CollegeUsers/getEmployeesByType\"),\n      data: {\n        userType,\n        whereFilter: {\n          fullName: {\n            like: fullName\n          }\n        }\n      }\n    }).then(({\n      data\n    }) => {\n      resolve(data);\n    }).catch(error => {\n      reject(error);\n    });\n  });\n};","map":{"version":3,"sources":["/home/vomaksh/Documents/college-project-dummy/College-Management-System-UI/src/remoteMethods/CollegeUser/CollegeUser.js"],"names":["axios","apiUrl","addCollegeUser","userData","Promise","resolve","reject","method","url","data","then","catch","error","loginUser","email","password","userType","editUser","getUserByToken","token","getEmployeesByUserType","fullName","whereFilter","like"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport {apiUrl} from \"../../vars/config\";\n\nexport const addCollegeUser = userData => {\n  return new Promise((resolve, reject) => {\n    axios({\n      method: \"POST\",\n      url: `${apiUrl}/CollegeUsers/createUser`,\n      data: { userData }\n    }).then(({ data }) => {\n      resolve(data);\n    }).catch(error => {\n      reject(error);\n    })\n  })\n}\n\nexport const loginUser = (email, password, userType) => {\n  return new Promise((resolve, reject) => {\n    axios({\n      method: \"POST\",\n      url: `${apiUrl}/CollegeUsers/loginUser`,\n      data: { email, password, userType }\n    }).then(({ data }) => {\n      resolve(data);\n    }).catch(error => {\n      reject(error);\n    })\n  })\n}\n\nexport const editUser = (userType, userData) => {\n  return new Promise((resolve, reject) => {\n    axios({\n      method: \"POST\",\n      url: `${apiUrl}/CollegeUsers/editUser`,\n      data: { userType, userData }\n    }).then(({ data }) => {\n      resolve(data);\n    }).catch(error => {\n      reject(error);\n    })\n  })\n}\n\nexport const getUserByToken = token => {\n  return new Promise((resolve, reject) => {\n    axios({\n      method: \"POST\",\n      url: `${apiUrl}/CollegeUsers/getUserByToken`,\n      data: { token }\n    }).then(({ data }) => {\n      resolve(data);\n    }).catch(error => {\n      reject(error);\n    })\n  })\n}\n\nexport const getEmployeesByUserType = (userType, fullName) => {\n  return new Promise((resolve, reject) => {\n    axios({\n      method: \"POST\",\n      url: `${apiUrl}/CollegeUsers/getEmployeesByType`,\n      data: { userType, whereFilter: { fullName: { like: fullName } } }\n    }).then(({ data }) => {\n      resolve(data);\n    }).catch(error => {\n      reject(error);\n    })\n  });\n}"]},"metadata":{},"sourceType":"module"}