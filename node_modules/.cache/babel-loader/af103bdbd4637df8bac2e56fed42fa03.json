{"ast":null,"code":"import _defineProperty from \"/home/vomaksh/Documents/college-project-dummy/College-Management-System-UI/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/home/vomaksh/Documents/college-project-dummy/College-Management-System-UI/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/vomaksh/Documents/college-project-dummy/College-Management-System-UI/src/containers/ExamCell/AddStudentMarks/StudentAddMarksDialog.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect, useState } from 'react';\nimport { Dialog, DialogTitle, DialogContent, DialogActions, Button, TextField, DialogContentText, Grid } from \"@material-ui/core\";\nimport { createMuiTheme } from \"@material-ui/core/styles\";\nimport { green } from \"@material-ui/core/colors\";\nimport Select from \"react-select\";\nimport dropdownStyles from \"../../../styles/dropdownStyles\";\n\nconst StudentAddMarksDialog = props => {\n  const isMarksDialogOpen = props.isMarksDialogOpen,\n        isMarksEdit = props.isMarksEdit,\n        setMarksEdit = props.setMarksEdit,\n        setMarksDialogOpen = props.setMarksDialogOpen,\n        currentSubjectMarks = props.currentSubjectMarks,\n        setCurrentSubjectMarks = props.setCurrentSubjectMarks,\n        subjects = props.subjects,\n        currentSubjectIndex = props.currentSubjectIndex,\n        saveMarks = props.saveMarks,\n        student = props.student,\n        setStudent = props.setStudent;\n\n  const _useState = useState(\"\"),\n        _useState2 = _slicedToArray(_useState, 2),\n        internalExamMarks = _useState2[0],\n        setInternalExamMarks = _useState2[1];\n\n  const _useState3 = useState(\"\"),\n        _useState4 = _slicedToArray(_useState3, 2),\n        internalExtraMarks = _useState4[0],\n        setInternalExtraMarks = _useState4[1];\n\n  const _useState5 = useState(\"\"),\n        _useState6 = _slicedToArray(_useState5, 2),\n        externalExamMarks = _useState6[0],\n        setExternalExamMarks = _useState6[1];\n\n  const closeModalHandler = () => {\n    setInternalExamMarks(\"\");\n    setInternalExtraMarks(\"\");\n    setExternalExamMarks(\"\");\n    setMarksDialogOpen(false);\n    setMarksEdit(!isMarksEdit);\n  };\n\n  useEffect(() => {\n    if (isMarksEdit && currentSubjectMarks) {\n      const internalExamMarks = currentSubjectMarks.internalExamMarks,\n            internalExtraMarks = currentSubjectMarks.internalExtraMarks,\n            externalMarks = currentSubjectMarks.externalMarks;\n      setInternalExamMarks(internalExamMarks);\n      setInternalExtraMarks(internalExtraMarks);\n      setExternalExamMarks(externalMarks);\n    }\n  }, [isMarksEdit, currentSubjectMarks]);\n\n  const saveOrEditMarksClickHandler = () => {\n    if (isMarksEdit) {\n      saveMarks(true, currentSubjectMarks.subjectId, internalExamMarks, internalExtraMarks, externalExamMarks, currentSubjectMarks.id).then(marks => {\n        setCurrentSubjectMarks(marks);\n        closeModalHandler();\n      }).catch(error => console.log(error));\n    } else {\n      console.log(subjects[currentSubjectIndex]);\n      saveMarks(false, subjects[currentSubjectIndex].subjectId, internalExamMarks, internalExtraMarks, externalExamMarks).then(marks => {\n        setStudent(_objectSpread({}, student, {\n          marks: [...student.marks, marks]\n        }));\n        setCurrentSubjectMarks(marks);\n        closeModalHandler();\n      }).catch(error => console.log(error));\n    }\n  };\n\n  return React.createElement(Dialog, {\n    fullWidth: true,\n    open: isMarksDialogOpen,\n    onClose: closeModalHandler,\n    \"aria-labelledby\": \"form-dialog-title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, React.createElement(DialogTitle, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, isMarksEdit ? \"Edit Marks\" : \"Add Marks\"), React.createElement(DialogContent, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, React.createElement(TextField, {\n    autoFocus: true,\n    margin: \"dense\",\n    label: \"Internal Exam Marks\",\n    value: internalExamMarks,\n    variant: \"outlined\",\n    onChange: event => setInternalExamMarks(event.target.value),\n    fullWidth: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }), React.createElement(TextField, {\n    margin: \"dense\",\n    label: \"Internal Extra Marks\",\n    value: internalExtraMarks,\n    variant: \"outlined\",\n    onChange: event => setInternalExtraMarks(event.target.value),\n    fullWidth: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }), React.createElement(TextField, {\n    margin: \"dense\",\n    label: \"External Exam Marks\",\n    value: externalExamMarks,\n    variant: \"outlined\",\n    onChange: event => setExternalExamMarks(event.target.value),\n    fullWidth: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  })), React.createElement(DialogActions, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, React.createElement(Button, {\n    onClick: closeModalHandler,\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, \"Cancel\"), React.createElement(Button, {\n    onClick: saveOrEditMarksClickHandler,\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, \"Save Marks\")));\n};\n\nexport default StudentAddMarksDialog;","map":{"version":3,"sources":["/home/vomaksh/Documents/college-project-dummy/College-Management-System-UI/src/containers/ExamCell/AddStudentMarks/StudentAddMarksDialog.js"],"names":["React","useEffect","useState","Dialog","DialogTitle","DialogContent","DialogActions","Button","TextField","DialogContentText","Grid","createMuiTheme","green","Select","dropdownStyles","StudentAddMarksDialog","props","isMarksDialogOpen","isMarksEdit","setMarksEdit","setMarksDialogOpen","currentSubjectMarks","setCurrentSubjectMarks","subjects","currentSubjectIndex","saveMarks","student","setStudent","internalExamMarks","setInternalExamMarks","internalExtraMarks","setInternalExtraMarks","externalExamMarks","setExternalExamMarks","closeModalHandler","externalMarks","saveOrEditMarksClickHandler","subjectId","id","then","marks","catch","error","console","log","event","target","value"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Button,\n  TextField,\n  DialogContentText,\n  Grid\n} from \"@material-ui/core\";\nimport { createMuiTheme } from \"@material-ui/core/styles\";\nimport { green } from \"@material-ui/core/colors\";\nimport Select from \"react-select\";\nimport dropdownStyles from \"../../../styles/dropdownStyles\";\n\nconst StudentAddMarksDialog = props => {\n  const { isMarksDialogOpen, isMarksEdit, setMarksEdit, setMarksDialogOpen, currentSubjectMarks, setCurrentSubjectMarks, subjects, currentSubjectIndex, saveMarks, student, setStudent } = props;\n  const [ internalExamMarks, setInternalExamMarks ] = useState(\"\");\n  const [ internalExtraMarks, setInternalExtraMarks ] = useState(\"\");\n  const [ externalExamMarks, setExternalExamMarks ] = useState(\"\");\n  const closeModalHandler = () => {\n    setInternalExamMarks(\"\");\n    setInternalExtraMarks(\"\");\n    setExternalExamMarks(\"\");\n    setMarksDialogOpen(false);\n    setMarksEdit(!isMarksEdit);\n  }\n  useEffect(() => {\n    if (isMarksEdit && currentSubjectMarks) {\n      const { internalExamMarks, internalExtraMarks, externalMarks } = currentSubjectMarks;\n      setInternalExamMarks(internalExamMarks);\n      setInternalExtraMarks(internalExtraMarks);\n      setExternalExamMarks(externalMarks);\n    }\n  }, [isMarksEdit, currentSubjectMarks]);\n  const saveOrEditMarksClickHandler = () => {\n    if (isMarksEdit) {\n      saveMarks(\n        true,\n        currentSubjectMarks.subjectId,\n        internalExamMarks,\n        internalExtraMarks,\n        externalExamMarks,\n        currentSubjectMarks.id\n      )\n        .then(marks => {\n          setCurrentSubjectMarks(marks);\n          closeModalHandler();\n        })\n        .catch(error => console.log(error));\n    } else {\n      console.log(subjects[currentSubjectIndex]);\n      saveMarks(\n        false,\n        subjects[currentSubjectIndex].subjectId,\n        internalExamMarks,\n        internalExtraMarks,\n        externalExamMarks,\n      )\n        .then(marks => {\n          setStudent({ ...student, marks: [...student.marks, marks ]});\n          setCurrentSubjectMarks(marks);\n          closeModalHandler();\n        })\n        .catch(error => console.log(error));\n    }\n  }\n  return (\n    <Dialog fullWidth open={isMarksDialogOpen} onClose={closeModalHandler} aria-labelledby=\"form-dialog-title\">\n      <DialogTitle>{isMarksEdit ? \"Edit Marks\" : \"Add Marks\"}</DialogTitle>\n      <DialogContent>\n          <TextField\n            autoFocus\n            margin=\"dense\"\n            label=\"Internal Exam Marks\"\n            value={internalExamMarks}\n            variant={\"outlined\"}\n            onChange={event => setInternalExamMarks(event.target.value)}\n            fullWidth\n          />\n          <TextField\n            margin=\"dense\"\n            label=\"Internal Extra Marks\"\n            value={internalExtraMarks}\n            variant={\"outlined\"}\n            onChange={event => setInternalExtraMarks(event.target.value)}\n            fullWidth\n          />\n          <TextField\n            margin=\"dense\"\n            label=\"External Exam Marks\"\n            value={externalExamMarks}\n            variant={\"outlined\"}\n            onChange={event => setExternalExamMarks(event.target.value)}\n            fullWidth\n          />\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={closeModalHandler} color=\"primary\">\n          Cancel\n        </Button>\n        <Button onClick={saveOrEditMarksClickHandler} color=\"primary\">\n          Save Marks\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n\nexport default StudentAddMarksDialog;"]},"metadata":{},"sourceType":"module"}