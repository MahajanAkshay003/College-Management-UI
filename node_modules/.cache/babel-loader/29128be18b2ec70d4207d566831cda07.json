{"ast":null,"code":"var _jsxFileName = \"/home/vomaksh/Documents/college-project-dummy/College-Management-System-UI/src/containers/ExamCell/ExamCellDashboard/StudentTable/StudentTable.js\";\nimport React, { useEffect, useState } from 'react';\nimport { withRouter } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { Table, TableHead, TableRow, TableCell, TableBody, Checkbox, Paper, Button } from \"@material-ui/core\";\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\nimport { green } from '@material-ui/core/colors';\n\nconst StudentsTable = props => {\n  const tableHeaders = [\"Name\", \"Roll Number\", \"Current Semester\", \"Department\", \"Batch\", \"Actions\"];\n  const students = props.students,\n        selectedStudents = props.selectedStudents,\n        setSelectedStudents = props.setSelectedStudents;\n  useEffect(() => {\n    if (props.user.userType !== \"examcell\") tableHeaders.pop();\n  }, []);\n\n  const addEditMarksHandler = studentId => {\n    props.history.push(\"/dashboard/editMarks/\".concat(studentId));\n  };\n\n  const selectStudentCheckboxHandler = (event, studentId) => {\n    if (event.target.checked) setSelectedStudents([...selectedStudents, studentId]);else setSelectedStudents(selectedStudents.filter(id => id !== studentId));\n  };\n\n  const selectAllStudentsCheckboxHandler = event => {\n    if (event.target.checked) setSelectedStudents(students.map(student => student.id));else setSelectedStudents([]);\n  };\n\n  const isStudentSelected = studentId => !!selectedStudents.find(id => id === studentId);\n\n  return React.createElement(Paper, {\n    elevation: 3,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, React.createElement(Table, {\n    size: 'medium',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, React.createElement(TableHead, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, React.createElement(TableRow, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, React.createElement(TableCell, {\n    padding: \"checkbox\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, React.createElement(Checkbox, {\n    checked: selectedStudents.length === students.length,\n    onChange: selectAllStudentsCheckboxHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  })), tableHeaders.map((tableHeader, index) => React.createElement(TableCell, {\n    key: index,\n    align: 'left',\n    padding: 'default',\n    sortDirection: false,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, tableHeader)))), React.createElement(TableBody, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, students.map(student => React.createElement(TableRow, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, React.createElement(TableCell, {\n    padding: \"checkbox\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, React.createElement(Checkbox, {\n    checked: isStudentSelected(student.id),\n    onChange: event => selectStudentCheckboxHandler(event, student.id),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  })), React.createElement(TableCell, {\n    component: \"th\",\n    scope: \"row\",\n    padding: \"none\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, student.fullName), React.createElement(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, student.rollNumber), React.createElement(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, student.semester), React.createElement(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, student.department.departmentName), React.createElement(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, student.batch.batchName), props.user.userType === \"examcell\" && React.createElement(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, React.createElement(ThemeProvider, {\n    theme: theme,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, React.createElement(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    style: {\n      color: \"white\"\n    },\n    onClick: () => addEditMarksHandler(student.id),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, \"Add / Edit Marks\"))))))));\n};\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: green\n  }\n});\n\nconst mapStateToProps = state => ({\n  user: state.user\n});\n\nexport default withRouter(connect(mapStateToProps)(StudentsTable));","map":{"version":3,"sources":["/home/vomaksh/Documents/college-project-dummy/College-Management-System-UI/src/containers/ExamCell/ExamCellDashboard/StudentTable/StudentTable.js"],"names":["React","useEffect","useState","withRouter","connect","Table","TableHead","TableRow","TableCell","TableBody","Checkbox","Paper","Button","createMuiTheme","ThemeProvider","green","StudentsTable","props","tableHeaders","students","selectedStudents","setSelectedStudents","user","userType","pop","addEditMarksHandler","studentId","history","push","selectStudentCheckboxHandler","event","target","checked","filter","id","selectAllStudentsCheckboxHandler","map","student","isStudentSelected","find","length","tableHeader","index","fullName","rollNumber","semester","department","departmentName","batch","batchName","theme","color","palette","primary","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport { withRouter } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport {Table, TableHead, TableRow, TableCell, TableBody, Checkbox, Paper, Button} from \"@material-ui/core\";\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\nimport { green } from '@material-ui/core/colors';\n\nconst StudentsTable = props => {\n  const tableHeaders = [\"Name\", \"Roll Number\", \"Current Semester\", \"Department\", \"Batch\", \"Actions\"];\n  const { students, selectedStudents, setSelectedStudents } = props;\n  useEffect(() => {\n    if (props.user.userType !== \"examcell\") tableHeaders.pop();\n  }, []);\n  const addEditMarksHandler = studentId => {\n    props.history.push(`/dashboard/editMarks/${studentId}`);\n  }\n  const selectStudentCheckboxHandler = (event, studentId) => {\n    if (event.target.checked) setSelectedStudents([...selectedStudents, studentId]);\n    else setSelectedStudents(selectedStudents.filter(id => id !== studentId));\n  }\n  const selectAllStudentsCheckboxHandler = event => {\n    if (event.target.checked) setSelectedStudents(students.map(student => student.id));\n    else setSelectedStudents([]);\n  }\n  const isStudentSelected = studentId => !!selectedStudents.find(id => id === studentId);\n  return (\n    <Paper elevation={3}>\n      <Table size={'medium'}>\n        <TableHead>\n          <TableRow>\n            <TableCell padding=\"checkbox\">\n              <Checkbox\n                checked={selectedStudents.length === students.length}\n                onChange={selectAllStudentsCheckboxHandler}\n              />\n            </TableCell>\n            {tableHeaders.map((tableHeader, index) => (\n              <TableCell\n                key={index}\n                align={'left'}\n                padding={'default'}\n                sortDirection={false}\n              >\n                {tableHeader}\n              </TableCell>\n            ))}\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {students.map((student) => (\n            <TableRow>\n              <TableCell padding=\"checkbox\">\n                <Checkbox\n                  checked={isStudentSelected(student.id)}\n                  onChange={(event) => selectStudentCheckboxHandler(event, student.id)}\n                />\n              </TableCell>\n              <TableCell component=\"th\" scope=\"row\" padding=\"none\">\n                {student.fullName}\n              </TableCell>\n              <TableCell>{student.rollNumber}</TableCell>\n              <TableCell>{student.semester}</TableCell>\n              <TableCell>{student.department.departmentName}</TableCell>\n              <TableCell>{student.batch.batchName}</TableCell>\n              {props.user.userType === \"examcell\" && <TableCell>\n                <ThemeProvider theme={theme}>\n                  <Button variant=\"contained\" color=\"primary\" style={{ color: \"white\" }} onClick={() => addEditMarksHandler(student.id)}>\n                    Add / Edit Marks\n                  </Button>\n                </ThemeProvider>\n              </TableCell>}\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </Paper>\n  );\n}\n\nconst theme = createMuiTheme({\n  palette: { primary: green }\n});\n\nconst mapStateToProps = state => ({\n  user: state.user\n})\n\nexport default withRouter(connect(mapStateToProps)(StudentsTable));"]},"metadata":{},"sourceType":"module"}