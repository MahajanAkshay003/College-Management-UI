{"ast":null,"code":"import axios from 'axios';\nimport { apiUrl } from \"../../vars/config\";\nexport const sendAnnouncement = (subject, description, studentId, senderId, senderType) => {\n  return new Promise((resolve, reject) => {\n    axios({\n      method: \"POST\",\n      url: \"\".concat(apiUrl, \"/Announcements/sendAnnouncement\"),\n      data: {\n        subject,\n        description,\n        studentId,\n        senderId,\n        senderType\n      }\n    }).then(({\n      data\n    }) => {\n      resolve(data.announcement);\n    }).catch(error => {\n      reject(error);\n    });\n  });\n};\nexport const getAnnouncements = (id, userType) => {\n  return new Promise((resolve, reject) => {\n    switch (userType) {\n      case \"student\":\n        axios({\n          method: \"GET\",\n          url: \"\".concat(apiUrl, \"/Announcements/getStudentAnnouncements\"),\n          params: {\n            studentId: id\n          }\n        }).then(({\n          data\n        }) => {\n          resolve(data.announcements);\n        }).catch(error => {\n          reject(error);\n        });\n        break;\n\n      default:\n        axios({\n          method: \"GET\",\n          url: \"\".concat(apiUrl, \"/Announcements/getEmployeeAnnouncements\"),\n          params: {\n            id,\n            userType\n          }\n        }).then(({\n          data\n        }) => {\n          resolve(data.announcements);\n        }).catch(error => {\n          reject(error);\n        });\n    }\n  });\n};\nexport const sendQuery = (facultyId, studentId, questionTitle, questionDescription) => {\n  return new Promise((resolve, reject) => {\n    axios({\n      method: \"POST\",\n      url: \"\".concat(apiUrl, \"/StudentQueries/askQuery\"),\n      data: {\n        facultyId,\n        studentId,\n        questionTitle,\n        questionDescription\n      }\n    }).then(({\n      data\n    }) => {\n      resolve(data.query);\n    }).catch(error => {\n      reject(error);\n    });\n  });\n};\nexport const getQueries = (userType, id) => {\n  let idFieldName, urlEndPoint;\n\n  switch (userType) {\n    case \"student\":\n      idFieldName = \"studentId\";\n      urlEndPoint = \"\".concat(apiUrl, \"/StudentQueries/getQueriesByStudentId\");\n      break;\n\n    case \"faculty\":\n      idFieldName = \"facultyId\";\n      urlEndPoint = \"\".concat(apiUrl, \"/StudentQueries/getFacultyQueries\");\n      break;\n\n    default:\n  }\n\n  return new Promise((resolve, reject) => {\n    axios({\n      method: \"POST\",\n      url: urlEndPoint,\n      data: {\n        [idFieldName]: id\n      }\n    }).then(({\n      data\n    }) => {\n      resolve(data.queries);\n    }).catch(error => {\n      reject(error);\n    });\n  });\n};\nexport const saveQueryAnswer = (studentQueryId, answer) => {\n  return new Promise((resolve, reject) => {\n    axios({\n      method: \"POST\",\n      url: \"\".concat(apiUrl, \"/StudentQueryAnswers/answerQuery\"),\n      data: {\n        studentQueryId,\n        answer\n      }\n    }).then(({\n      data\n    }) => {\n      resolve(data.queryAnswer);\n    }).catch(error => {\n      reject(error);\n    });\n  });\n};\nexport const sendMailToStudent = (studentId, subject, description) => {\n  return new Promise((resolve, reject) => {\n    axios({\n      method: \"POST\",\n      url: \"\".concat(apiUrl, \"/Announcements/sendMail\"),\n      data: {\n        studentId,\n        subject,\n        description\n      }\n    }).then(({\n      data\n    }) => {\n      resolve(data.success);\n    }).catch(error => {\n      reject(error);\n    });\n  });\n};","map":{"version":3,"sources":["/home/vomaksh/Documents/college-project-dummy/College-Management-System-UI/src/remoteMethods/Announcement/announcement.js"],"names":["axios","apiUrl","sendAnnouncement","subject","description","studentId","senderId","senderType","Promise","resolve","reject","method","url","data","then","announcement","catch","error","getAnnouncements","id","userType","params","announcements","sendQuery","facultyId","questionTitle","questionDescription","query","getQueries","idFieldName","urlEndPoint","queries","saveQueryAnswer","studentQueryId","answer","queryAnswer","sendMailToStudent","success"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport {apiUrl} from \"../../vars/config\";\n\nexport const sendAnnouncement = (subject, description, studentId, senderId, senderType) => {\n  return new Promise((resolve, reject) => {\n    axios({\n      method: \"POST\",\n      url: `${apiUrl}/Announcements/sendAnnouncement`,\n      data: {\n        subject, description, studentId, senderId, senderType\n      }\n    }).then(({ data }) => {\n      resolve(data.announcement);\n    }).catch(error => {\n      reject(error);\n    })\n  })\n}\n\nexport const getAnnouncements = (id, userType) => {\n  return new Promise((resolve, reject) => {\n    switch (userType) {\n      case \"student\":\n        axios({\n          method: \"GET\",\n          url: `${apiUrl}/Announcements/getStudentAnnouncements`,\n          params: { studentId: id }\n        }).then(({ data }) => {\n          resolve(data.announcements);\n        }).catch(error => {\n          reject(error);\n        });\n        break;\n      default:\n        axios({\n          method: \"GET\",\n          url: `${apiUrl}/Announcements/getEmployeeAnnouncements`,\n          params: { id, userType }\n        }).then(({ data }) => {\n          resolve(data.announcements);\n        }).catch(error => {\n          reject(error);\n        });\n    }\n  })\n}\n\nexport const sendQuery = (facultyId, studentId, questionTitle, questionDescription) => {\n  return new Promise((resolve, reject) => {\n    axios({\n      method: \"POST\",\n      url: `${apiUrl}/StudentQueries/askQuery`,\n      data: { facultyId, studentId, questionTitle, questionDescription }\n    }).then(({ data }) => {\n      resolve(data.query);\n    }).catch(error => {\n      reject(error);\n    })\n  })\n}\n\nexport const getQueries = (userType, id) => {\n  let idFieldName, urlEndPoint;\n  switch (userType) {\n    case \"student\":\n      idFieldName = \"studentId\";\n      urlEndPoint = `${apiUrl}/StudentQueries/getQueriesByStudentId`;\n      break;\n    case \"faculty\":\n      idFieldName = \"facultyId\";\n      urlEndPoint = `${apiUrl}/StudentQueries/getFacultyQueries`;\n      break;\n    default:\n  }\n  return new Promise((resolve, reject) => {\n    axios({\n      method: \"POST\",\n      url: urlEndPoint,\n      data: { [idFieldName]: id }\n    }).then(({ data }) => {\n      resolve(data.queries);\n    }).catch(error => {\n      reject(error);\n    })\n  })\n}\n\nexport const saveQueryAnswer = (studentQueryId, answer) => {\n  return new Promise((resolve, reject) => {\n    axios({\n      method: \"POST\",\n      url: `${apiUrl}/StudentQueryAnswers/answerQuery`,\n      data: { studentQueryId, answer }\n    }).then(({ data }) => {\n      resolve(data.queryAnswer);\n    }).catch(error => {\n      reject(error);\n    })\n  })\n}\n\nexport const sendMailToStudent = (studentId, subject, description) => {\n  return new Promise((resolve, reject) => {\n    axios({\n      method: \"POST\",\n      url: `${apiUrl}/Announcements/sendMail`,\n      data: { studentId, subject, description }\n    }).then(({ data }) => {\n      resolve(data.success);\n    }).catch(error => {\n      reject(error);\n    })\n  })\n}"]},"metadata":{},"sourceType":"module"}